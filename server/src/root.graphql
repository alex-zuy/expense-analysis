scalar Date
scalar DateTime

type ShopAccount {
    id: ID!
    login: String!
    accessToken: String!
    expiresAt: Date!
    updatedAt: Date!
    importedRangeStart: DateTime
    importedRangeEnd: DateTime
}

type User {
    id: ID!
    email: String!
    fullName: String!
    shopAccount: ShopAccount
}

type ShopAccountCheckResult {
    isSuccess: Boolean!
    error: String
    userName: String
}

type Product {
    id: ID!
    name: String!
}

type Purchase {
    id: ID!
    amount: Float!
    pricePerUnit: Float!
    purchasedAt: DateTime!
    product: Product!
}

type PurchasesGroup {
    id: ID!
    purchasedAt: DateTime!
    items: [Purchase!]!
    totalPrice: Float!
}

type Query {
    self: User!
    shopAccountCheck(accessToken: String!): ShopAccountCheckResult!
    purchasesGroups(dateFrom: DateTime!, dateTo: DateTime!): [PurchasesGroup!]!
}

input ShopAccountUpdateInput {
    login: String!
    accessToken: String!
    expiresAt: String!
}

input PurchasesHistoryImportInput {
    dateFrom: DateTime!
    dateTo: DateTime!
}

type Mutation {
    updateShopAccount(input: ShopAccountUpdateInput!): ShopAccount!
    importPurchasesHistory(input: PurchasesHistoryImportInput!): ShopAccount!
}
